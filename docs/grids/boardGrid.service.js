"use strict";

angular.module("grids").service("BoardGridService", function () {

	var emptyBoard = true;

	var numberStack = [];

	var currentNumber = null;
	var currentOperation = null;
	var currentOperationResult = null;

	var decimalCreated = false;

	var inputDirty = false;

	if (emptyBoard) {

		currentNumber = "0";
	}

	var isInt = function isInt(num) {

		return num % 1 === 1;
	};

	this.appendDigit = function (digit) {

		/**
   * currentNumber = "" -> prepares board to remove placeholder numbers
   * when a new number sequence is detected
   */

		if (emptyBoard) {

			currentNumber = "";
			emptyBoard = false;
		}

		if (!inputDirty) {

			if (digit === 0) {

				currentNumber = 0;

				return;
			} else if (digit === "." && !decimalCreated) {

				currentNumber = "0.";
				inputDirty = true;
				decimalCreated = true;
				return;
			}

			currentNumber = "";
		}

		if (digit === "." && !decimalCreated) {

			decimalCreated = true;
		} else if (digit === ".") {

			return;
		}

		currentNumber += digit;
		inputDirty = true;
	};

	this.getCurrentNumber = function () {

		return currentNumber;
	};

	var executeOperation = function executeOperation() {

		console.log("Executing " + currentOperation);

		var digitA = numberStack.shift();
		var digitB = numberStack.shift();

		switch (currentOperation) {

			case "addition":

				if (!isInt(digitA) || !isInt(digitB)) {

					currentOperationResult = parseFloat(digitA) + digitB;
				} else {

					currentOperationResult = digitA + digitB;
				}

				break;
			case "subtraction":

				if (!isInt(digitA) || !isInt(digitB)) {

					currentOperationResult = parseFloat(digitA) - digitB;
				} else {

					currentOperationResult = digitA - digitB;
				}

				break;
			case "multiplication":

				if (!isInt(digitA) || !isInt(digitB)) {

					currentOperationResult = parseFloat(digitA) * digitB;
				} else {

					currentOperationResult = digitA * digitB;
				}

				break;
			case "division":

				if (!isInt(digitA) || !isInt(digitB)) {

					currentOperationResult = parseFloat(digitA) / digitB;
				} else {

					currentOperationResult = digitA / digitB;
				}

				break;
			default:
				console.log("Operation has not been created.");

		}

		if (isInt(currentOperationResult)) {

			console.log("Result is an integer!");
		} else {

			console.log("Result is a float!");

			if (currentOperationResult < 1) {

				console.log(currentOperationResult);

				if (currentOperationResult.toString().length > 16) {

					currentOperationResult = parseFloat(currentOperationResult).toFixed(15);
				}
			}
		}

		console.log("Result: " + currentOperationResult);

		currentNumber = currentOperationResult;
	};

	this.setCurrentOperation = function (op) {

		if (op === "resultant") {

			if (numberStack === 2) {

				executeOperation();

				numberStack.push(Number(currentNumber));

				console.log(numberStack);

				inputDirty = false;
			}
		}

		/**
   * If there is nothing in numberStack & there is no input, do nothing
   * If there is nothing in numberStack & there is input, define an operation
   */

		if (numberStack.length === 0 && !inputDirty) {

			console.log("There is nothing to operate on");
		} else if (numberStack.length === 0 && inputDirty) {

			console.log("There is something to put in the stack!");

			currentOperation = op;

			numberStack.push(Number(currentNumber));
			console.log(numberStack);
			inputDirty = false;
		}

		/** If there is one element in numberStack & there is no input,
   * define an operation or allow to switch operations
   * If there is one element in numberStack & there is input,
   * push the input into numberStack
   */

		if (numberStack.length === 1 && !inputDirty) {

			console.log("There is an element in the stack");
			currentOperation = op;
			console.log(currentOperation);
		} else if (numberStack.length === 1 && inputDirty) {

			numberStack.push(Number(currentNumber));
			console.log(numberStack);
			inputDirty = false;

			/**
    * This will make the execution block to run.
    * The operation that was assigned to trigger the execution
    * will be stored after the execution is done as it will
    * leave one element in the stack ready to an operation
    */
		}

		/**
   * If there are two elements in numberStack,
   * execute the current operation
   */

		if (numberStack.length === 2) {

			console.log("Execute Operation");

			executeOperation();

			// Operation is complete. Add result to numberStack

			numberStack.push(Number(currentNumber));

			console.log(numberStack);

			currentOperation = op;
			console.log(currentOperation);
		}
	};

	this.clearBoard = function () {

		console.log("CLEAR");

		emptyBoard = true;

		numberStack.length = 0;

		currentNumber = 0;
		currentOperation = null;
		currentOperationResult = null;

		decimalCreated = false;

		inputDirty = false;
	};
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyaWRzL2JvYXJkR3JpZC5zZXJ2aWNlLmpzIl0sIm5hbWVzIjpbImFuZ3VsYXIiLCJtb2R1bGUiLCJzZXJ2aWNlIiwiZW1wdHlCb2FyZCIsIm51bWJlclN0YWNrIiwiY3VycmVudE51bWJlciIsImN1cnJlbnRPcGVyYXRpb24iLCJjdXJyZW50T3BlcmF0aW9uUmVzdWx0IiwiZGVjaW1hbENyZWF0ZWQiLCJpbnB1dERpcnR5IiwiaXNJbnQiLCJudW0iLCJhcHBlbmREaWdpdCIsImRpZ2l0IiwiZ2V0Q3VycmVudE51bWJlciIsImV4ZWN1dGVPcGVyYXRpb24iLCJjb25zb2xlIiwibG9nIiwiZGlnaXRBIiwic2hpZnQiLCJkaWdpdEIiLCJwYXJzZUZsb2F0IiwidG9TdHJpbmciLCJsZW5ndGgiLCJ0b0ZpeGVkIiwic2V0Q3VycmVudE9wZXJhdGlvbiIsIm9wIiwicHVzaCIsIk51bWJlciIsImNsZWFyQm9hcmQiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBQSxRQUFRQyxNQUFSLENBQWUsT0FBZixFQUNFQyxPQURGLENBQ1Usa0JBRFYsRUFDOEIsWUFBWTs7QUFFeEMsS0FBSUMsYUFBYSxJQUFqQjs7QUFFQSxLQUFNQyxjQUFjLEVBQXBCOztBQUVBLEtBQUlDLGdCQUFnQixJQUFwQjtBQUNBLEtBQUlDLG1CQUFtQixJQUF2QjtBQUNBLEtBQUlDLHlCQUF5QixJQUE3Qjs7QUFFQSxLQUFJQyxpQkFBaUIsS0FBckI7O0FBRUEsS0FBSUMsYUFBYSxLQUFqQjs7QUFHQSxLQUFJTixVQUFKLEVBQWdCOztBQUVmRSxrQkFBZ0IsR0FBaEI7QUFFQTs7QUFFRCxLQUFJSyxRQUFRLFNBQVJBLEtBQVEsQ0FBVUMsR0FBVixFQUFlOztBQUUxQixTQUFPQSxNQUFNLENBQU4sS0FBWSxDQUFuQjtBQUVBLEVBSkQ7O0FBT0EsTUFBS0MsV0FBTCxHQUFtQixVQUFVQyxLQUFWLEVBQWlCOztBQUVuQzs7Ozs7QUFNQSxNQUFJVixVQUFKLEVBQWdCOztBQUVmRSxtQkFBZ0IsRUFBaEI7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QVAsQ0FBakI7O0FBRUFXLFdBQVFDLEdBQVIsQ0FBWWIsV0FBWjs7QUFFQUUsc0JBQW1Cb0IsRUFBbkI7QUFDQVYsV0FBUUMsR0FBUixDQUFZWCxnQkFBWjtBQUVBO0FBRUQsRUF4RkQ7O0FBMEZBLE1BQUt1QixVQUFMLEdBQWtCLFlBQVk7O0FBRTdCYixVQUFRQyxHQUFSLENBQVksT0FBWjs7QUFFQWQsZUFBYSxJQUFiOztBQUVBQyxjQUFZbUIsTUFBWixHQUFxQixDQUFyQjs7QUFFQWxCLGtCQUFnQixDQUFoQjtBQUNBQyxxQkFBbUIsSUFBbkI7QUFDQUMsMkJBQXlCLElBQXpCOztBQUVBQyxtQkFBaUIsS0FBakI7O0FBRUFDLGVBQWEsS0FBYjtBQUVBLEVBaEJEO0FBa0JBLENBbFNGIiwiZmlsZSI6ImdyaWRzL2JvYXJkR3JpZC5zZXJ2aWNlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmFuZ3VsYXIubW9kdWxlKFwiZ3JpZHNcIilcblx0LnNlcnZpY2UoXCJCb2FyZEdyaWRTZXJ2aWNlXCIsIGZ1bmN0aW9uICgpIHtcblx0XHRcblx0XHRsZXQgZW1wdHlCb2FyZCA9IHRydWU7XG5cdFx0XG5cdFx0Y29uc3QgbnVtYmVyU3RhY2sgPSBbXTtcblx0XHRcblx0XHRsZXQgY3VycmVudE51bWJlciA9IG51bGw7XG5cdFx0bGV0IGN1cnJlbnRPcGVyYXRpb24gPSBudWxsO1xuXHRcdGxldCBjdXJyZW50T3BlcmF0aW9uUmVzdWx0ID0gbnVsbDtcblx0XHRcblx0XHRsZXQgZGVjaW1hbENyZWF0ZWQgPSBmYWxzZTtcblx0XHRcblx0XHRsZXQgaW5wdXREaXJ0eSA9IGZhbHNlO1xuXHRcdFxuXHRcdFxuXHRcdGlmIChlbXB0eUJvYXJkKSB7XG5cdFx0XHRcblx0XHRcdGN1cnJlbnROdW1iZXIgPSBcIjBcIjtcblx0XHRcdFxuXHRcdH1cblx0XHRcblx0XHRsZXQgaXNJbnQgPSBmdW5jdGlvbiAobnVtKSB7XG5cdFx0XHRcblx0XHRcdHJldHVybiBudW0gJSAxID09PSAxO1xuXHRcdFx0XG5cdFx0fTtcblx0XHRcblx0XHRcblx0XHR0aGlzLmFwcGVuZERpZ2l0ID0gZnVuY3Rpb24gKGRpZ2l0KSB7XG5cdFx0XHRcblx0XHRcdC8qKlxuXHRcdFx0ICogY3VycmVudE51bWJlciA9IFwiXCIgLT4gcHJlcGFyZXMgYm9hcmQgdG8gcmVtb3ZlIHBsYWNlaG9sZGVyIG51bWJlcnNcblx0XHRcdCAqIHdoZW4gYSBuZXcgbnVtYmVyIHNlcXVlbmNlIGlzIGRldGVjdGVkXG5cdFx0XHQgKi9cblx0XHRcdFxuXHRcdFx0XG5cdFx0XHRpZiAoZW1wdHlCb2FyZCkge1xuXHRcdFx0XHRcblx0XHRcdFx0Y3VycmVudE51bWJlciA9IFwiXCI7XG5cdFx0XHRcdGVtcHR5Qm9hcmQgPSBmYWxzZTtcblx0XHRcdFx0XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdGlmICghaW5wdXREaXJ0eSkge1xuXHRcdFx0XHRcblx0XHRcdFx0aWYgKGRpZ2l0ID09PSAwKSB7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0Y3VycmVudE51bWJlciA9IDA7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdFxuXHRcdFx0XHR9IGVsc2UgaWYgKGRpZ2l0ID09PSBcIi5cIiAmJiAhZGVjaW1hbENyZWF0ZWQpIHtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHRjdXJyZW50TnVtYmVyID0gIFwiMC5cIjtcblx0XHRcdFx0XHRpbnB1dERpcnR5ID0gdHJ1ZTtcblx0XHRcdFx0XHRkZWNpbWFsQ3JlYXRlZCA9IHRydWU7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdFxuXHRcdFx0XHR9XG5cdFx0XHRcdFxuXHRcdFx0XHRjdXJyZW50TnVtYmVyID0gXCJcIjtcblx0XHRcdFx0XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdGlmIChkaWdpdCA9PT0gXCIuXCIgJiYgIWRlY2ltYWxDcmVhdGVkKSB7XG5cdFx0XHRcdFxuXHRcdFx0XHRkZWNpbWFsQ3JlYXRlZCA9IHRydWU7XG5cdFx0XHRcdFxuXHRcdFx0fSBlbHNlIGlmIChkaWdpdCA9PT0gXCIuXCIpIHtcblx0XHRcdFx0XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdGN1cnJlbnROdW1iZXIgKz0gZGlnaXQ7XG5cdFx0XHRpbnB1dERpcnR5ID0gdHJ1ZTtcblx0XHRcdFxuXHRcdH07XG5cdFx0XG5cdFx0dGhpcy5nZXRDdXJyZW50TnVtYmVyID0gZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRyZXR1cm4gY3VycmVudE51bWJlcjtcblxuXHRcdH07XG5cdFx0XG5cdFx0Y29uc3QgZXhlY3V0ZU9wZXJhdGlvbiA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdFxuXHRcdFx0Y29uc29sZS5sb2coYEV4ZWN1dGluZyAke2N1cnJlbnRPcGVyYXRpb259YCk7XG5cdFx0XHRcblx0XHRcdGNvbnN0IGRpZ2l0QSA9IG51bWJlclN0YWNrLnNoaWZ0KCk7XG5cdFx0XHRjb25zdCBkaWdpdEIgPSBudW1iZXJTdGFjay5zaGlmdCgpO1xuXHRcdFx0XG5cdFx0XHRzd2l0Y2ggKGN1cnJlbnRPcGVyYXRpb24pIHtcblx0XHRcdFx0XG5cdFx0XHRcdGNhc2UgXCJhZGRpdGlvblwiOlxuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdGlmICghaXNJbnQoZGlnaXRBKSB8fCAhaXNJbnQoZGlnaXRCKSkge1xuXHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHRjdXJyZW50T3BlcmF0aW9uUmVzdWx0ID0gcGFyc2VGbG9hdChkaWdpdEEpICsgZGlnaXRCO1xuXHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0Y3VycmVudE9wZXJhdGlvblJlc3VsdCA9IGRpZ2l0QSArIGRpZ2l0Qjtcblx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBcInN1YnRyYWN0aW9uXCI6XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0aWYgKCFpc0ludChkaWdpdEEpIHx8ICFpc0ludChkaWdpdEIpKSB7XG5cdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdGN1cnJlbnRPcGVyYXRpb25SZXN1bHQgPSBwYXJzZUZsb2F0KGRpZ2l0QSkgLSBkaWdpdEI7XG5cdFx0XHRcdFx0XHRcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHRjdXJyZW50T3BlcmF0aW9uUmVzdWx0ID0gZGlnaXRBIC0gZGlnaXRCO1xuXHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIFwibXVsdGlwbGljYXRpb25cIjpcblx0XHRcdFx0XHRcblx0XHRcdFx0XHRpZiAoIWlzSW50KGRpZ2l0QSkgfHwgIWlzSW50KGRpZ2l0QikpIHtcblx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0Y3VycmVudE9wZXJhdGlvblJlc3VsdCA9IHBhcnNlRmxvYXQoZGlnaXRBKSAqIGRpZ2l0Qjtcblx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdGN1cnJlbnRPcGVyYXRpb25SZXN1bHQgPSBkaWdpdEEgKiBkaWdpdEI7XG5cdFx0XHRcdFx0XHRcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgXCJkaXZpc2lvblwiOlxuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdGlmICghaXNJbnQoZGlnaXRBKSB8fCAhaXNJbnQoZGlnaXRCKSkge1xuXHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHRjdXJyZW50T3BlcmF0aW9uUmVzdWx0ID0gcGFyc2VGbG9hdChkaWdpdEEpIC8gZGlnaXRCO1xuXHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0Y3VycmVudE9wZXJhdGlvblJlc3VsdCA9IGRpZ2l0QSAvIGRpZ2l0Qjtcblx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHRjb25zb2xlLmxvZyhcIk9wZXJhdGlvbiBoYXMgbm90IGJlZW4gY3JlYXRlZC5cIik7XG5cdFx0XHRcdFx0XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdFxuXHRcdFx0aWYgKGlzSW50KGN1cnJlbnRPcGVyYXRpb25SZXN1bHQpKSB7XG5cdFx0XHRcdFxuXHRcdFx0XHRjb25zb2xlLmxvZyhgUmVzdWx0IGlzIGFuIGludGVnZXIhYCk7XG5cdFx0XHRcdFxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XG5cdFx0XHRcdGNvbnNvbGUubG9nKGBSZXN1bHQgaXMgYSBmbG9hdCFgKTtcblx0XHRcdFx0XG5cdFx0XHRcdGlmIChjdXJyZW50T3BlcmF0aW9uUmVzdWx0IDwgMSkge1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdGNvbnNvbGUubG9nKGN1cnJlbnRPcGVyYXRpb25SZXN1bHQpO1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdGlmIChjdXJyZW50T3BlcmF0aW9uUmVzdWx0LnRvU3RyaW5nKCkubGVuZ3RoID4gMTYpIHtcblx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0Y3VycmVudE9wZXJhdGlvblJlc3VsdCA9IHBhcnNlRmxvYXQoY3VycmVudE9wZXJhdGlvblJlc3VsdCkudG9GaXhlZCgxNSk7XG5cdFx0XHRcdFx0XHRcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XG5cdFx0XHRcdH1cblx0XHRcdFx0XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdGNvbnNvbGUubG9nKGBSZXN1bHQ6ICR7Y3VycmVudE9wZXJhdGlvblJlc3VsdH1gKTtcblx0XHRcdFxuXHRcdFx0Y3VycmVudE51bWJlciA9IGN1cnJlbnRPcGVyYXRpb25SZXN1bHQ7XG5cdFx0XHRcblx0XHR9O1xuXHRcdFxuXHRcdFxuXHRcdHRoaXMuc2V0Q3VycmVudE9wZXJhdGlvbiA9IGZ1bmN0aW9uIChvcCkge1xuXHRcdFx0XG5cdFx0XHRpZiAob3AgPT09IFwicmVzdWx0YW50XCIpIHtcblx0XHRcdFx0XG5cdFx0XHRcdGlmIChudW1iZXJTdGFjayA9PT0gMikge1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdGV4ZWN1dGVPcGVyYXRpb24oKTtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHRudW1iZXJTdGFjay5wdXNoKE51bWJlcihjdXJyZW50TnVtYmVyKSk7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0Y29uc29sZS5sb2cobnVtYmVyU3RhY2spO1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdGlucHV0RGlydHkgPSBmYWxzZTtcblx0XHRcdFx0XHRcblx0XHRcdFx0fVxuXHRcdFx0XHRcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0LyoqXG5cdFx0XHQgKiBJZiB0aGVyZSBpcyBub3RoaW5nIGluIG51bWJlclN0YWNrICYgdGhlcmUgaXMgbm8gaW5wdXQsIGRvIG5vdGhpbmdcblx0XHRcdCAqIElmIHRoZXJlIGlzIG5vdGhpbmcgaW4gbnVtYmVyU3RhY2sgJiB0aGVyZSBpcyBpbnB1dCwgZGVmaW5lIGFuIG9wZXJhdGlvblxuXHRcdFx0ICovXG5cdFx0XHRcblx0XHRcdGlmIChudW1iZXJTdGFjay5sZW5ndGggPT09IDAgJiYgIWlucHV0RGlydHkpIHtcblx0XHRcdFx0XG5cdFx0XHRcdGNvbnNvbGUubG9nKFwiVGhlcmUgaXMgbm90aGluZyB0byBvcGVyYXRlIG9uXCIpO1xuXHRcdFx0XHRcblx0XHRcdH0gZWxzZSBpZiAobnVtYmVyU3RhY2subGVuZ3RoID09PSAwICYmIGlucHV0RGlydHkpIHtcblx0XHRcdFx0XG5cdFx0XHRcdGNvbnNvbGUubG9nKFwiVGhlcmUgaXMgc29tZXRoaW5nIHRvIHB1dCBpbiB0aGUgc3RhY2shXCIpO1xuXHRcdFx0XHRcblx0XHRcdFx0Y3VycmVudE9wZXJhdGlvbiA9IG9wO1xuXHRcdFx0XHRcblx0XHRcdFx0bnVtYmVyU3RhY2sucHVzaChOdW1iZXIoY3VycmVudE51bWJlcikpO1xuXHRcdFx0XHRjb25zb2xlLmxvZyhudW1iZXJTdGFjayk7XG5cdFx0XHRcdGlucHV0RGlydHkgPSBmYWxzZTtcblx0XHRcdFx0XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdC8qKiBJZiB0aGVyZSBpcyBvbmUgZWxlbWVudCBpbiBudW1iZXJTdGFjayAmIHRoZXJlIGlzIG5vIGlucHV0LFxuXHRcdFx0ICogZGVmaW5lIGFuIG9wZXJhdGlvbiBvciBhbGxvdyB0byBzd2l0Y2ggb3BlcmF0aW9uc1xuXHRcdFx0ICogSWYgdGhlcmUgaXMgb25lIGVsZW1lbnQgaW4gbnVtYmVyU3RhY2sgJiB0aGVyZSBpcyBpbnB1dCxcblx0XHRcdCAqIHB1c2ggdGhlIGlucHV0IGludG8gbnVtYmVyU3RhY2tcblx0XHRcdCAqL1xuXHRcdFx0XG5cdFx0XHRpZiAobnVtYmVyU3RhY2subGVuZ3RoID09PSAxICYmICFpbnB1dERpcnR5KSB7XG5cdFx0XHRcdFxuXHRcdFx0XHRjb25zb2xlLmxvZyhcIlRoZXJlIGlzIGFuIGVsZW1lbnQgaW4gdGhlIHN0YWNrXCIpO1xuXHRcdFx0XHRjdXJyZW50T3BlcmF0aW9uID0gb3A7XG5cdFx0XHRcdGNvbnNvbGUubG9nKGN1cnJlbnRPcGVyYXRpb24pO1xuXHRcdFx0XHRcblx0XHRcdH0gZWxzZSBpZiAobnVtYmVyU3RhY2subGVuZ3RoID09PSAxICYmIGlucHV0RGlydHkpIHtcblx0XHRcdFx0XG5cdFx0XHRcdG51bWJlclN0YWNrLnB1c2goTnVtYmVyKGN1cnJlbnROdW1iZXIpKTtcblx0XHRcdFx0Y29uc29sZS5sb2cobnVtYmVyU3RhY2spO1xuXHRcdFx0XHRpbnB1dERpcnR5ID0gZmFsc2U7XG5cdFx0XHRcdFxuXHRcdFx0XHQvKipcblx0XHRcdFx0ICogVGhpcyB3aWxsIG1ha2UgdGhlIGV4ZWN1dGlvbiBibG9jayB0byBydW4uXG5cdFx0XHRcdCAqIFRoZSBvcGVyYXRpb24gdGhhdCB3YXMgYXNzaWduZWQgdG8gdHJpZ2dlciB0aGUgZXhlY3V0aW9uXG5cdFx0XHRcdCAqIHdpbGwgYmUgc3RvcmVkIGFmdGVyIHRoZSBleGVjdXRpb24gaXMgZG9uZSBhcyBpdCB3aWxsXG5cdFx0XHRcdCAqIGxlYXZlIG9uZSBlbGVtZW50IGluIHRoZSBzdGFjayByZWFkeSB0byBhbiBvcGVyYXRpb25cblx0XHRcdFx0ICovXG5cdFx0XHRcdFxuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHQvKipcblx0XHRcdCAqIElmIHRoZXJlIGFyZSB0d28gZWxlbWVudHMgaW4gbnVtYmVyU3RhY2ssXG5cdFx0XHQgKiBleGVjdXRlIHRoZSBjdXJyZW50IG9wZXJhdGlvblxuXHRcdFx0ICovXG5cdFx0XHRcblx0XHRcdGlmIChudW1iZXJTdGFjay5sZW5ndGggPT09IDIpIHtcblx0XHRcdFx0XG5cdFx0XHRcdGNvbnNvbGUubG9nKFwiRXhlY3V0ZSBPcGVyYXRpb25cIik7XG5cdFx0XHRcdFxuXHRcdFx0XHRleGVjdXRlT3BlcmF0aW9uKCk7XG5cdFx0XHRcdFxuXHRcdFx0XHQvLyBPcGVyYXRpb24gaXMgY29tcGxldGUuIEFkZCByZXN1bHQgdG8gbnVtYmVyU3RhY2tcblx0XHRcdFx0XG5cdFx0XHRcdG51bWJlclN0YWNrLnB1c2goTnVtYmVyKGN1cnJlbnROdW1iZXIpKTtcblx0XHRcdFx0XG5cdFx0XHRcdGNvbnNvbGUubG9nKG51bWJlclN0YWNrKTtcblx0XHRcdFx0XG5cdFx0XHRcdGN1cnJlbnRPcGVyYXRpb24gPSBvcDtcblx0XHRcdFx0Y29uc29sZS5sb2coY3VycmVudE9wZXJhdGlvbik7XG5cdFx0XHRcdFxuXHRcdFx0fVxuXHRcdFx0XG5cdFx0fTtcblx0XHRcblx0XHR0aGlzLmNsZWFyQm9hcmQgPSBmdW5jdGlvbiAoKSB7XG5cdFx0XHRcblx0XHRcdGNvbnNvbGUubG9nKFwiQ0xFQVJcIik7XG5cdFx0XHRcblx0XHRcdGVtcHR5Qm9hcmQgPSB0cnVlO1xuXHRcdFx0XG5cdFx0XHRudW1iZXJTdGFjay5sZW5ndGggPSAwO1xuXHRcdFx0XG5cdFx0XHRjdXJyZW50TnVtYmVyID0gMDtcblx0XHRcdGN1cnJlbnRPcGVyYXRpb24gPSBudWxsO1xuXHRcdFx0Y3VycmVudE9wZXJhdGlvblJlc3VsdCA9IG51bGw7XG5cdFx0XHRcblx0XHRcdGRlY2ltYWxDcmVhdGVkID0gZmFsc2U7XG5cdFx0XHRcblx0XHRcdGlucHV0RGlydHkgPSBmYWxzZTtcblx0XHRcdFxuXHRcdH1cblx0XHRcblx0fSk7XG4iXX0=
